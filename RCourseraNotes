1. Basic Building Blocks
==================================================
Vectors:
=> use c() to create a vector
=> The operations done on vector will be element by element
=> R uses a concept of recycling, when the we are adding 2 vectors as below:
c(1,2,3,4)+c(0,10) => o/p: c(1,12,3,14)
c(1,2,3,4)+c(0,10,100)=> o/p: Will give Warning message:
Warning message:
In c(1, 2, 3, 4) + c(0, 10, 100) :
  longer object length is not a multiple of shorter object length
[1]   1  12 103   4


Workspace: H:\\pdf\\knowledge\\Knowledge\\RCoursera\\Course2\\

Workspace and Files
====================================
1. Get the current working directory in R
Ans: getwd()
2. List all the objects in your local workspace
Ans: ls()
3. List all the files in your working directory.
Ans: list.files() or dir()
4. List the arguments used by the inbuilt function list.files()
Ans: args(list.files)
5. Create a new directory in the PWD
Ans: dir.create("testdir")
6. Create a file in the PWD
Ans: file.create("mytest.R")
7. List the files in the PWD
Ans: list.files()
8. Check if the file exists the in PWD
Ans: file.exists("mytest.R")
9. Info of the file created:
Ans: file.info()
10. Renaming the file
Ans: file.rename(from="", to ="")
11. Command to copy file
Ans: file.copy(from ="", to="")
Note: swirl()
---- play()-- to leave the lesson temporarily
---- nxt() -- return to swirl
12. Providing relative path to a file
Ans: file.path("mytest3.R")

Sequences and Numbers
==============================
1. Simplest way to create sequences in R
=> 1:20 
2. When we create a sequence of pi:10
it creates a sequence of 7 elements and exits as the 9th element would be more than 10
3. Other way to create a sequence is seq(1:20)
4. Create a sequence from 0 to 10 with step size =0.5
seq(0,10, by=0.5)
5. Sequence of 30 numbers between 5 and 10 
seq(5, 10, length =30)
6. Generate a sequence of integers from 1 to N where N represents the length of the my_seq vector
seq(along.with = my_seq)
seq_along(my_seq)
7. Create a vector containing 40 zeros
rep(0, times = 40)
8. Repeat a set of 3 vectors 10 times
rep(c(0,1,2), times = 10)
9. Create a vector to contain 10 0's 10 1's and 10 2's
rep(c(0,1,2), each = 10)

Vectors
==========================================

There are 2 types of vectors: atomic vectors and lists
1. Atomic Vectors: Contains data of exactly on data type
2. List: can contain multiple data types

Create a numeric vector num_vect that contains the values 0.5, 55, -10 and 6
num_vect<- c(0.5, 55, -10, 6)

Creating a char vector
my_char <- c("My","Name","is")

Use paste function to op: "My Name Is"

paste(my_char, collapse =" ")

Explanation:
| The `collapse` argument to the paste() function tells R that when we join together the elements of the my_char
| character vector, we'd like to separate them with single spaces.

paste(c(1:3), c("X","Y","Z"), sep = "")
o/p:
1X 2Y 3Z

Missing Values:
=============================================
y <- rnorm(1000) --> creates randomm vector with 1000 values
z <- rep(NA, 1000) --> create a vector containing 1000 NA values
Select 100 elements at random from 2000 values (y and z)
my_data <- sample(c(y,z), 100)

sample function arguments:
sample(x, size, replace = FALSE, prob = NULL)
x: either a vector of one or more elements from which to chose.
n: a +ve number the number of items to choose from
size: a non -ve number giving number of items to choose.

Subsetting Vectors
================================================
Index Vectors come in 4 different flavours:
i. Logical Vectors
ii. Vectors of positive integers
iii. Vectors of negative integers
iv. Vectors of character string

x[x>0] x is a vector containing NA values
| Since NA is not a value, but rather a placeholder for an unknown quantity, the expression NA > 0 evaluates to NA.
| Hence we get a bunch of NAs mixed in with our positive numbers when we do this.	

values of x that are both non-missing AND greater than zero.
x[!is.na(x) & x>0]

Interview question:
As we know R follows 1 based indexing so what values does it return on x[0]?
ans : numeric(0)
Negative Indexing:
| What if we're interested in all elements of x EXCEPT the 2nd and 10th? It would be pretty tedious to construct a
| vector containing all numbers 1 through 40 EXCEPT 2 and 10.

x[c(-2, -10)]

Matrices and Data Frames
===============================
Matrices can contain a single class of data.
Data Frames can consist of many different classes of data.
dim(<vector>)- Tells us the dimensions of vector which is NULL
What if we give a vector the dim attribute?
dim(my_vector) <- c(4,5)
Explanation: the dim() function helos us to get or set the the `dim` attribute of the R object
Another way to do the same is:
attributes(my_vector)
o/p:
$dim
[1] 4 5

After providing the my_vector with value  4 5 the vector is no converted to a matrix with row 4 and 5 column
Create a matrix using the matrix method.
matrix(1:20, nrow = 4, ncol = 5)=> matrix of 4 rows and 5 columns

identical() method is used to check the if the 2 objects passed are same

To label the rows of the column of the matrix we do the following:
first create a vector of patients as below:
patients<-c("Bill","Gina","Kelly","Sean")
Second use the cbind() with 2 arguments: pateients vector and the matrix:
cbind is used to combine columns
o/p:
     patients                       
[1,] "Bill"   "1" "5" "9"  "13" "17"
[2,] "Gina"   "2" "6" "10" "14" "18"
[3,] "Kelly"  "3" "7" "11" "15" "19"
[4,] "Sean"   "4" "8" "12" "16" "20"

How to include names of the patients in the table without destroying the integrity of the numeric data.
my_data<-data.frame(patients, my_matrix)

Provide column names as follows:
cnames<-c("patients", "age","bp","rating","test")
colnames(my_data)<-cnames

8. Logic
==========================================================
Which of the following commands would produce the indices of the elements in ints that are less than or equal to 2?
which(ints <= 2)

any() - sees if any of the elements of ints are less than 0
all() - sees if all the elements of ints are greater than 0
